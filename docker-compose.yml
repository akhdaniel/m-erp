version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17
    container_name: m-erp-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: m_erp_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for messaging and caching
  redis:
    image: redis:7-alpine
    container_name: m-erp-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Authentication Service
  user-auth-service:
    build:
      context: .
      dockerfile: ./services/user-auth-service/Dockerfile
    container_name: m-erp-user-auth
    ports:
      - "8001:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:password@postgres:5432/user_auth_db
      SECRET_KEY: development-secret-key-change-in-production
      ENVIRONMENT: development
      DEBUG: "true"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_NAME: user-auth-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/user-auth-service:/app
    restart: unless-stopped

  # Company Partner Service
  company-partner-service:
    build:
      context: .
      dockerfile: ./services/company-partner-service/Dockerfile
    container_name: m-erp-company-partner
    ports:
      - "8002:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:password@postgres:5432/company_partner_db
      AUTH_SERVICE_URL: http://kong:8000
      SERVICE_KEY: company-partner-service-key
      ENVIRONMENT: development
      DEBUG: "true"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_NAME: company-partner-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-auth-service:
        condition: service_started
    volumes:
      - ./services/company-partner-service:/app
    restart: unless-stopped

  # Menu Access Service
  menu-access-service:
    build: ./services/menu-access-service
    container_name: m-erp-menu-access
    ports:
      - "8003:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:password@postgres:5432/menu_access_db
      AUTH_SERVICE_URL: http://user-auth-service:8000
      SERVICE_KEY: menu-access-service-key
      ENVIRONMENT: development
      DEBUG: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-auth-service:
        condition: service_started
    volumes:
      - ./services/menu-access-service:/app
    restart: unless-stopped

  # Service Registry
  service-registry:
    build: ./services/service-registry
    container_name: m-erp-service-registry
    ports:
      - "8004:8000"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KONG_ADMIN_URL: http://kong:8001
      AUTH_SERVICE_URL: http://user-auth-service:8000
      DEBUG: "true"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Kong)
  kong:
    image: kong:3.4
    container_name: m-erp-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "9080:8000"  # Proxy port (main API gateway)
      - "9001:8001"  # Admin API port
    volumes:
      - ./services/api-gateway/kong.yml:/kong/kong.yml:ro
    depends_on:
      - user-auth-service
      - company-partner-service
      - menu-access-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10

  # UI Service (Vue.js Frontend)
  ui-service:
    build: ./services/ui-service
    container_name: m-erp-ui
    ports:
      - "3000:80"  # Frontend interface
    environment:
      NODE_ENV: production
    depends_on:
      - kong
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: ./services/notification-service/Dockerfile
    container_name: m-erp-notifications
    ports:
      - "8005:8005"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_NAME: notification-service
      ENVIRONMENT: development
      DEBUG: "true"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Audit Service
  audit-service:
    build:
      context: .
      dockerfile: ./services/audit-service/Dockerfile
    container_name: m-erp-audit
    ports:
      - "8007:8006"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:password@postgres:5432/audit_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_NAME: audit-service
      ENVIRONMENT: development
      DEBUG: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Inventory Service
  inventory-service:
    build:
      context: .
      dockerfile: ./services/inventory-service/Dockerfile
    container_name: m-erp-inventory
    ports:
      - "8005:8005"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:password@postgres:5432/inventory_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_NAME: inventory-service
      ENVIRONMENT: development
      DEBUG: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sales Service
  sales-service:
    build:
      context: .
      dockerfile: ./services/sales-service/Dockerfile
    container_name: m-erp-sales
    ports:
      - "8006:8006"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:password@postgres:5432/sales_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_NAME: sales-service
      ENVIRONMENT: development
      DEBUG: "true"
      # Service integration URLs
      INVENTORY_SERVICE_URL: http://inventory-service:8005
      PARTNER_SERVICE_URL: http://company-partner-service:8000
      CURRENCY_SERVICE_URL: http://company-partner-service:8000
      AUDIT_SERVICE_URL: http://audit-service:8006
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      inventory-service:
        condition: service_started
      company-partner-service:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data: