#!/usr/bin/env python3
"""
Simple test to verify Sales Service structure without external dependencies.
"""

import os
import sys
import importlib.util

def test_file_structure():
    """Test that all required files exist."""
    print("üîç Testing Sales Service File Structure\n")
    
    required_files = {
        "Application": "main.py",
        "Requirements": "requirements.txt", 
        "Environment": ".env.example",
        "Quote API": "sales_module/api/quote_api.py",
        "Quote Schemas": "sales_module/schemas/quote_schemas.py",
        "Quote Service": "sales_module/services/quote_service.py",
        "Quote Models": "sales_module/models/quote.py",
        "API Tests": "tests/test_quote_api.py",
        "Service Tests": "tests/test_quote_service.py"
    }
    
    all_exist = True
    total_size = 0
    
    for category, file_path in required_files.items():
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            total_size += size
            print(f"‚úÖ {category:<15}: {file_path} ({size:,} bytes)")
        else:
            print(f"‚ùå {category:<15}: {file_path} missing")
            all_exist = False
    
    print(f"\nüìä Total codebase: {total_size:,} bytes")
    return all_exist

def test_import_structure():
    """Test that Python modules can be imported."""
    print("\nüîç Testing Python Import Structure\n")
    
    # Test main application
    try:
        if os.path.exists("main.py"):
            print("‚úÖ main.py structure looks valid")
        else:
            print("‚ùå main.py not found")
    except Exception as e:
        print(f"‚ùå main.py import error: {e}")
    
    # Test API structure
    try:
        api_file = "sales_module/api/quote_api.py"
        if os.path.exists(api_file):
            with open(api_file, 'r') as f:
                content = f.read()
                if "from fastapi import" in content and "@router." in content:
                    print("‚úÖ Quote API structure valid")
                else:
                    print("‚ùå Quote API missing FastAPI components")
        else:
            print("‚ùå Quote API file not found")
    except Exception as e:
        print(f"‚ùå Quote API analysis error: {e}")
    
    # Test schema structure
    try:
        schema_file = "sales_module/schemas/quote_schemas.py"
        if os.path.exists(schema_file):
            with open(schema_file, 'r') as f:
                content = f.read()
                if "from pydantic import" in content and "class " in content:
                    print("‚úÖ Schema structure valid")
                else:
                    print("‚ùå Schema missing Pydantic components")
        else:
            print("‚ùå Schema file not found")
    except Exception as e:
        print(f"‚ùå Schema analysis error: {e}")

def show_testing_instructions():
    """Show instructions for testing the application."""
    print("\nüìù How to Test the Sales Service Application\n")
    
    print("üîß Setup Instructions:")
    print("1. Create virtual environment:")
    print("   python3 -m venv venv")
    print("   source venv/bin/activate")
    print("")
    print("2. Install dependencies:")
    print("   pip install -r requirements.txt")
    print("")
    print("3. Start the server:")
    print("   python main.py")
    print("   OR")
    print("   ./run_server.sh")
    print("")
    
    print("üåê Testing URLs:")
    print("‚Ä¢ Service Root: http://localhost:8006/")
    print("‚Ä¢ Health Check: http://localhost:8006/health")  
    print("‚Ä¢ API Docs: http://localhost:8006/api/docs")
    print("‚Ä¢ Quote API: http://localhost:8006/api/v1/quotes/")
    print("")
    
    print("üìã Interactive Testing (via Swagger UI):")
    print("1. Open http://localhost:8006/api/docs in your browser")
    print("2. You'll see all 20+ quote API endpoints")
    print("3. Click 'Try it out' on any endpoint")
    print("4. Fill in example data and click 'Execute'")
    print("")
    
    print("üß™ Example API Calls:")
    print("")
    print("Create Quote (POST /api/v1/quotes/):")
    print("""curl -X POST "http://localhost:8006/api/v1/quotes/" \\
     -H "Content-Type: application/json" \\
     -d '{
       "title": "Test Quote",
       "customer_id": 100,
       "currency_code": "USD",
       "contact_person": "John Doe",
       "contact_email": "john@example.com"
     }'""")
    print("")
    
    print("List Quotes (GET /api/v1/quotes/):")
    print('curl "http://localhost:8006/api/v1/quotes/?page=1&page_size=10"')
    print("")
    
    print("Get Analytics (GET /api/v1/quotes/analytics):")
    print('curl "http://localhost:8006/api/v1/quotes/analytics"')
    print("")
    
    print("‚ö†Ô∏è Expected Behavior:")
    print("‚Ä¢ API endpoints will return 500 errors (no database)")
    print("‚Ä¢ Swagger UI will show all endpoints and schemas")
    print("‚Ä¢ Request validation will work (422 for invalid data)")
    print("‚Ä¢ Health checks will return 200 OK")
    print("‚Ä¢ OpenAPI spec generation will work")
    
def show_production_deployment():
    """Show production deployment information."""
    print("\nüöÄ Production Deployment Notes\n")
    
    print("üì¶ Required Infrastructure:")
    print("‚Ä¢ PostgreSQL database (for quote storage)")
    print("‚Ä¢ Redis server (for event messaging)")
    print("‚Ä¢ Other M-ERP services (inventory, partners, etc.)")
    print("")
    
    print("üîß Environment Variables:")
    print("‚Ä¢ Copy .env.example to .env")
    print("‚Ä¢ Configure database connection")
    print("‚Ä¢ Configure Redis connection")
    print("‚Ä¢ Configure service URLs")
    print("")
    
    print("üê≥ Docker Deployment:")
    print("‚Ä¢ Build: docker build -t sales-service .")
    print("‚Ä¢ Run: docker run -p 8006:8006 sales-service")
    print("‚Ä¢ Use docker-compose for full M-ERP stack")

def main():
    """Run all tests and show instructions."""
    print("üöÄ Sales Service Testing Guide")
    print("=" * 50)
    
    # Test structure
    structure_ok = test_file_structure()
    test_import_structure()
    
    # Show instructions
    show_testing_instructions()
    show_production_deployment()
    
    print("\n" + "=" * 50)
    if structure_ok:
        print("‚úÖ Sales Service is ready for testing!")
        print("üìö Follow the instructions above to start the server")
    else:
        print("‚ùå Some files are missing - check the structure")

if __name__ == "__main__":
    main()