version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: user-auth-postgres
    environment:
      POSTGRES_DB: userauth
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: authpass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authuser -d userauth"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: user-auth-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build: .
    container_name: user-auth-service
    ports:
      - "8000:8000"  # This maps host port 8000 to container port 8000
    environment:
      - DATABASE_URL=postgresql+asyncpg://authuser:authpass123@postgres:5432/userauth
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - DEBUG=true
      - ENVIRONMENT=development
      - ACCESS_TOKEN_EXPIRE_MINUTES=15
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080,http://127.0.0.1:3000
      - REDIS_URL=redis://redis:6379/0
      - RATE_LIMITING_ENABLED=true
      - AUDIT_LOGGING_ENABLED=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: